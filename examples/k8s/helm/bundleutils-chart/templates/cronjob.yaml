{{- if .Values.cronjob.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name:  {{ include "bundleutils.name" . }}-cron
  labels:
    app.kubernetes.io/name: {{ include "bundleutils.name" . }}
    helm.sh/chart: {{ include "bundleutils.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  schedule: "{{ .Values.cronjob.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: bundleutils
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              envFrom:
                - secretRef:
                    name: {{ .Values.bundleUtilsSecrets.name }}
              volumeMounts:
                - name: ssh-key
                  mountPath: /root/.ssh/
                  readOnly: true
              command:
                - /bin/sh
                - -c
                - |
                  env |sort
                  set -x
                  ssh -o UserKnownHostsFile=/root/.ssh/known_hosts -i /root/.ssh/privateKey git@github.com
                  cat  /root/.ssh/known_hosts
                  ###############################################################################
                  # Sanitise: replace dots with dashes
                  ###############################################################################
                  BRANCH_NAME_CANDIDATE=$(printf '%s' "$JENKINS_URL"  | sed 's|^https://||; s|/$||; s/\./-/g')
                  ###############################################################################
                  # Validate with git check-ref-format
                  ###############################################################################
                  if git check-ref-format --branch "$BRANCH_NAME_CANDIDATE" >/dev/null 2>&1; then
                  echo "✔  '$BRANCH_NAME_CANDIDATE' is a valid branch name."
                  export GIT_BRANCH=$BRANCH_NAME_CANDIDATE
                  else
                  echo "✖  '$BRANCH_NAME_CANDIDATE' is NOT a valid branch name." >&2
                  exit 1
                  fi
                  ###############################################################################
                  # Clone $$GIT_REPO
                  ###############################################################################
                  # env | sort
                  SSH_KEY_PATH=/root/.ssh/privateKey
                  GIT_ACTION=$(echo "$GIT_ACTION" | tr -d '\n')
                  eval `ssh-agent -s`
                  ssh-add ${SSH_KEY_PATH}
                  git config --global user.email $GIT_COMMITTER_EMAIL
                  git config --global user.name $GIT_COMMITTER_NAME
                  git clone $GIT_REPO
                  cd $(basename -s .git "$GIT_REPO" |sed 's/\.git$//')
                  git branch -a
                  ###############################################################################
                  # Ensure branch exists locally (create if necessary)
                  ###############################################################################
                  echo "Preparing branch $GIT_BRANCH …"
                  git fetch origin --quiet
                  if git show-ref --verify --quiet "refs/remotes/origin/$GIT_BRANCH"; then
                  # Remote branch exists – check it out tracking origin
                  git checkout --quiet -B "$GIT_BRANCH" "origin/$GIT_BRANCH"
                  else
                  # Remote branch does not exist – create new local branch
                  git checkout --quiet -b "$GIT_BRANCH"
                  fi
                  {{ .Values.bundleutilsAction.perform }}
          restartPolicy: {{ .Values.cronjob.restartPolicy }}
          volumes:
            - name: ssh-key
              secret:
                secretName: {{ .Values.sshSecret.name }}
                defaultMode: 0600
{{- end }}
