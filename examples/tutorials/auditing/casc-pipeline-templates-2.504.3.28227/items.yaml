removeStrategy:
  rbac: SYNC
  items: NONE
items:
- kind: pipeline
  name: AC-TASE
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: false
      script: |
        properties([parameters(
                [activeChoice(choiceType: 'PT_SINGLE_SELECT',
                        filterLength: 1, filterable: false,
                        name: 'mychoice',
                        randomName: 'choice-parameter-2381968702490339',
                        script: groovyScript(
                                fallbackScript: [classpath: [],
                                                 oldScript: '',
                                                 sandbox  : false, script: 'return  false'],
                                script: [classpath: [],
                                         oldScript: '',
                                         sandbox  : false, script: '''
                                                            // SHOULD NOT BE REQUIRED TO SET PROXY HERE SO IGNORE THE COMENTED LINES BELOW 
                                                            // USE THEM ONLY FOR TESTING/DEVELOPMENT PURPOSE
                                                            //def proxyHost = "squid-dev-proxy.squid.svc.cluster.local"
                                                            //def proxyPort = 3128                                                
                                                            // Set up the proxy
                                                            //System.setProperty("http.proxyHost", proxyHost)
                                                            //System.setProperty("http.proxyPort", proxyPort.toString())
                                                            //System.setProperty("https.proxyHost", proxyHost)
                                                            //System.setProperty("https.proxyPort", proxyPort.toString())                                                     
                                                            def url = new URL("https://api.github.com/repos/cb-ci-templates/ci-poc-params-update/branches")                                                   
                                                            def conn = url.openConnection()
                                                            //conn.setRequestProperty("Authorization", "token " + "<YOUR_GITHUB_TOKEN>")
                                                            def text = conn.inputStream.text
                                                            def branches = new groovy.json.JsonSlurper().parseText(text)*.name
                                                            println branches
                                                            return branches                                     
                                            ''']
                        )
                )
                ]
        )])
        pipeline {
            agent {
                kubernetes {
                    yaml '''
                        apiVersion: v1
                        kind: Pod
                        spec:
                          containers:
                          - name: shell
                            image: caternberg/curl-yq-jq
                            command:
                              - cat
                            tty: true
                            workingDir: "/home/jenkins/agent"
                            securityContext:
                              runAsUser: 1000            
                        '''
                    defaultContainer 'shell'
                }
            }
            stages {
                stage('PrintParam') {
                    steps {
                        container("shell") {
                            echo "Hello ${mychoice}"
                        }
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: ''
  properties:
  - jiraProjectProperty: {}
  - parameters:
      parameterDefinitions:
      - activeChoice:
          choiceType: PT_SINGLE_SELECT
          filterable: false
          name: mychoice
          filterLength: 1
          script:
            groovyScript:
              fallbackScript:
                secureGroovyScript:
                  sandbox: false
                  script: |-
                    return  false
              script:
                secureGroovyScript:
                  sandbox: false
                  script: |2-

                                                                        // SHOULD NOT BE REQUIRED TO SET PROXY HERE SO IGNORE THE COMENTED LINES BELOW 
                                                                        // USE THEM ONLY FOR TESTING/DEVELOPMENT PURPOSE
                                                                        //def proxyHost = "squid-dev-proxy.squid.svc.cluster.local"
                                                                        //def proxyPort = 3128                                                
                                                                        // Set up the proxy
                                                                        //System.setProperty("http.proxyHost", proxyHost)
                                                                        //System.setProperty("http.proxyPort", proxyPort.toString())
                                                                        //System.setProperty("https.proxyHost", proxyHost)
                                                                        //System.setProperty("https.proxyPort", proxyPort.toString())                                                     
                                                                        def url = new URL("https://api.github.com/repos/cb-ci-templates/ci-poc-params-update/branches")                                                   
                                                                        def conn = url.openConnection()
                                                                        //conn.setRequestProperty("Authorization", "token " + "<YOUR_GITHUB_TOKEN>")
                                                                        def text = conn.inputStream.text
                                                                        def branches = new groovy.json.JsonSlurper().parseText(text)*.name
                                                                        println branches
                                                                        return branches                                     
                                                        
          randomName: choice-parameter-2381968702490339
  resumeBlocked: false
- kind: folder
  name: dev1
  description: ''
  displayName: ''
  properties:
  - envVars: {}
  - mavenConfigFolderOverrideProperty:
      override: false
  - itemRestrictions:
      filter: false
- kind: multibranch
  name: MB-TEST_JOB
  description: |-
    MB-TEST_JOB
  displayName: ''
  orphanedItemStrategy:
    defaultOrphanedItemStrategy:
      pruneDeadBranches: true
      daysToKeep: -1
      numToKeep: -1
      abortBuilds: false
  projectFactory:
    customBranchProjectFactory:
      marker: ci-config.yaml
      definition:
        cpsScmFlowDefinition:
          scriptPath: templates/mavenMultiBranch/Jenkinsfile
          scm:
            scmGit:
              userRemoteConfigs:
              - userRemoteConfig:
                  credentialsId: ci-template-gh-app
                  url: https://github.com/cb-ci-templates/ci-templates.git
              branches:
              - branchSpec:
                  name: '*/main'
          lightweight: true
  properties:
  - envVars: {}
  - mavenConfigFolderOverrideProperty:
      override: false
  sourcesList:
  - branchSource:
      source:
        github:
          apiUri: https://api.github.com
          traits:
          - gitHubBranchDiscovery:
              strategyId: 3
          - gitHubPullRequestDiscovery:
              strategyId: 2
          - gitHubForkDiscovery:
              trust:
                gitHubTrustPermissions: {}
              strategyId: 2
          - cloudBeesSCMReporting:
              visibleLinesOnly: false
              handlers:
              - endBuildError:
                  maxLogLines: 100
              - stage:
                  verbosity:
                    all: {}
              - junit: {}
          repoOwner: cb-ci-templates
          credentialsId: ci-template-gh-app
          id: af4cc07b-5541-4fc2-aad1-cd6f4d5e5908
          repository: sample-app-spring-boot-maven
          configuredByUrl: true
          repositoryUrl: 
            https://github.com/cb-ci-templates/sample-app-spring-boot-maven.git
      strategy:
        namedBranchesDifferent:
          defaultProperties:
          - suppressAutomaticTriggering:
              triggeredBranchesRegex: ^.*$
              strategy: INDEXING
          namedExceptions:
          - named:
              name: PR-\d+
              props:
              - suppressAutomaticTriggering:
                  triggeredBranchesRegex: ''
                  strategy: NONE
  trigger:
    periodicFolderTrigger:
      interval: 1d
- kind: organizationFolder
  name: ORG-TEST_JOB
  displayName: ''
  navigators:
  - github:
      enableAvatar: true
      apiUri: https://api.github.com
      traits:
      - gitHubBranchDiscovery:
          strategyId: 1
      - gitHubPullRequestDiscovery:
          strategyId: 2
      - gitHubForkDiscovery:
          trust:
            gitHubTrustPermissions: {}
          strategyId: 2
      repoOwner: cb-ci-templates
      credentialsId: ci-template-gh-app
  orphanedItemStrategy:
    defaultOrphanedItemStrategy:
      pruneDeadBranches: true
      daysToKeep: -1
      numToKeep: -1
      abortBuilds: false
  projectFactories:
  - customMultiBranchProjectFactory:
      factory:
        customBranchProjectFactory:
          marker: ci-config.yaml
          definition:
            cpsScmFlowDefinition:
              scriptPath: templates/mavenMultiBranch/Jenkinsfile
              scm:
                scmGit:
                  userRemoteConfigs:
                  - userRemoteConfig:
                      credentialsId: ci-template-gh-app
                      url: https://github.com/cb-ci-templates/ci-templates.git
                  branches:
                  - branchSpec:
                      name: '*/main'
              lightweight: true
  properties:
  - organizationChildHealthMetricsProperty:
      templates:
      - worstChildHealthMetric:
          recursive: true
      - averageChildHealthMetric: {}
      - jobStatusHealthMetric:
          unstable: true
          countVirginJobs: false
          failure: true
          success: true
          unbuilt: true
      - projectEnabledHealthMetric: {}
  - organizationChildOrphanedItemsProperty:
      strategy:
        inherit: {}
  - organizationChildTriggersProperty:
      templates:
      - periodicFolderTrigger:
          interval: 1d
  - envVars: {}
  - suppressFolderAutomaticTriggering:
      strategy: NONE
      branches: .*
  strategy:
    allBranchesSame: {}
  trigger:
    periodicFolderTrigger:
      interval: 1d
- kind: pipeline
  name: testBuildDiscarder
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |
        pipeline {
            agent none

            stages {
                stage('Hello') {
                    steps {
                        echo 'Hello World'
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: ''
  resumeBlocked: false
- kind: pipeline
  name: testk8s
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |
        // Uses Declarative syntax to run commands inside a container.
        pipeline {
            agent {
                kubernetes {
                    // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
                    // Or, to avoid YAML:
                    // containerTemplate {
                    //     name 'shell'
                    //     image 'ubuntu'
                    //     command 'sleep'
                    //     args 'infinity'
                    // }
                    yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: shell
            image: ubuntu
            command:
            - sleep
            args:
            - infinity
            securityContext:
              # ubuntu runs as root by default, it is recommended or even mandatory in some environments (such as pod security admission "restricted") to run as a non-root user.
              runAsUser: 1000
        '''
                    // Can also wrap individual steps:
                    // container('shell') {
                    //     sh 'hostname'
                    // }
                    defaultContainer 'shell'
                    retries 2
                }
            }
            stages {
                stage('Main') {
                    steps {
                        sh 'hostname'
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: ''
  resumeBlocked: false
- kind: pipeline
  name: TESTTMP
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: ''
  description: ''
  disabled: false
  displayName: ''
  properties:
  - jiraProjectProperty: {}
  resumeBlocked: false
- kind: pipeline
  name: tmp
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: false
      script: |
        // Jenkinsfile: High-Load Performance Pipeline
        def yamlPod='''
                      apiVersion: v1
                      kind: Pod
                      spec:                
                        containers:
                        - name: git
                          image: bitnami/git:latest
                          command:
                          - sleep
                          args:
                          - infinity
                          securityContext:
                            # ubuntu runs as root by default, it is recommended or even mandatory in some environments (such as pod security admission "restricted") to run as a non-root user.
                            runAsUser: 1000
                        - name: stress-ng
                          # see https://colinianking.github.io/stress-ng/
                          image: ghcr.io/colinianking/stress-ng
                          command:
                          - sleep
                          args:
                          - infinity
                          securityContext:
                            # ubuntu runs as root by default, it is recommended or even mandatory in some environments (such as pod security admission "restricted") to run as a non-root user.
                            runAsUser: 1000
                      '''
        pipeline {
            agent none
            environment {
                //STRESS_NG_VERBOSE_METRICS="--timeout 60s --metrics-brief --verbose"
                STRESS_NG_VERBOSE_METRICS="--timeout 60s --metrics-brief"
            }
            stages {
                stage('Fan-out Load') {
                    parallel {
                        stage('Clone Heavy Repos') {
                            agent {
                                kubernetes {
                                    yaml yamlPod
                                    defaultContainer 'git'
                                    retries 2
                                }
                            }
                            steps {
                                sh '''
                                  mkdir -p workspace/repo && cd workspace/repo
                                  git clone --depth=1  https://github.com/torvalds/linux.git .
                                '''
                            }
                        }
                        stage('Stress Pod Agent') {
                            agent {
                                kubernetes {
                                    yaml yamlPod
                                    defaultContainer 'stress-ng'
                                    retries 2
                                }
                            }
                            steps {
                                //see https://colinianking.github.io/stress-ng/
                                sh '''
                                  stress-ng --cpu 2 --io 2 --vm 2 --vm-bytes 256M  --sock 2 --hdd 1  ${STRESS_NG_VERBOSE_METRICS}  > metrics-agent.txt                           
                                '''
                                archiveArtifacts artifacts: 'metrics-agent.txt', followSymlinks: false
                            }
                        }
                        // This stage requires stress-ng in the controller pod container rather than in the agent context
                        // It requires a custom image with stress-ng baked in
                        stage('Stress Controller') {
                            agent {
                                //Run on master, requires 1 executor on Controller
                                label "built-in"
                            }
                            steps {
                                script {
                                    // Configurable parameters
                                    def cpuThreads = 4           // Number of threads to consume CPU
                                    def memoryMB = 512         // Memory to allocate in MB
                                    def runSeconds = 60          // Duration to run the stress in seconds

                                    println "Starting stress test: CPU=${cpuThreads} threads, Memory=${memoryMB}MB, Duration=${runSeconds}s"

                                    // Allocate memory
                                    def allocatedMemory = []
                                    def bytesPerMB = 1024 * 1024
                                    (0..<memoryMB).each { i ->
                                        allocatedMemory << new byte[bytesPerMB]
                                    }
                                    println "Allocated ${memoryMB}MB memory"

                                    // Run CPU load in threads
                                    def threads = (1..cpuThreads).collect {
                                        Thread.start {
                                            def end = System.currentTimeMillis() + (runSeconds * 1000)
                                            while (System.currentTimeMillis() < end) {
                                                Math.sqrt(Math.random()) // Keep CPU busy
                                            }
                                        }
                                    }
                                    //threads*.join()
                                    println "Stress test complete."
                                }
                                //see https://colinianking.github.io/stress-ng/
                                /*
                                sh '''
                                  stress-ng --cpu 2 --io 2 --vm 2 --vm-bytes 256M  --sock 2 --hdd 1  ${STRESS_NG_VERBOSE_METRICS}   > metrics-controller.txt                                  
                                '''
                                archiveArtifacts artifacts: 'metrics-controller.txt', followSymlinks: false
                                */
                            }
                        }
                        
                        stage('Disk IO') {
                            agent {
                                kubernetes {
                                    yaml yamlPod
                                    defaultContainer 'stress-ng'
                                    retries 2
                                }
                            }
                            /**
                             * IO on volume: How to get the metrics? From NodeExporter? Kubectmetrics?
                             *
                             */
                            steps {
                                sh '''
                                  dd if=/dev/urandom of=largefile bs=1M count=500
                                  md5sum largefile
                                  pwd && ls -lah
                                '''
                                //Using stash/unstash is a bad practise, however, we use it here to create some IO between the agent and the controller volume (jenkins_home)
                                stash includes: 'largefile', name: 'myfile'
                                deleteDir()
                                unstash 'myfile'
                                sh '''
                                  rm -f largefile
                                '''
                            }
                        }
                        /* TODO: adjust to your needs
                        stage('Artifact Upload/Download') {
                            agent {
                                kubernetes {
                                    yaml yamlPod
                                    defaultContainer 'stress-ng'
                                    retries 2
                                }
                            }
                            steps {
                                unstash 'myfile'
                                sh '''
                                  curl -X PUT -T myfile http://artifact.repo/upload/myfile
                                  curl -O http://artifact.repo/upload/myfile
                                '''
                            }
                        }
                         */
                        stage('Workspace Cleanup') {
                            agent {
                                kubernetes {
                                    yaml yamlPod
                                    defaultContainer 'built-in'
                                    retries 2
                                }
                            }
                            steps {
                                deleteDir()
                            }
                        }
                    }
                }
            }
            post {
                always {
                    echo "Test pipeline complete. Check metrics in Prometheus/Grafana."
                }
            }
        }
  description: ''
  disabled: false
  displayName: ''
  resumeBlocked: false
- kind: pipeline
  name: ZD-266630
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |+
        // Uses Declarative syntax to run commands inside a container.
        pipeline {
            agent {
                kubernetes {
                    // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
                    // Or, to avoid YAML:
                    // containerTemplate {
                    //     name 'shell'
                    //     image 'ubuntu'
                    //     command 'sleep'
                    //     args 'infinity'
                    // }
                    yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: shell
            image: busybox
            command:
            - sleep
            args:
            - infinity
            securityContext:
              # ubuntu runs as root by default, it is recommended or even mandatory in some environments (such as pod security admission "restricted") to run as a non-root user.
              runAsUser: 1000
        '''
                    // Can also wrap individual steps:
                    // container('shell') {
                    //     sh 'hostname'
                    // }
                    defaultContainer 'shell'
                    retries 2
                }
            }
            stages {
            stage('Archive Artifacts') {
                    steps {
                        timeout(time: 2, unit: 'HOURS') {
                            echo 'Azure Artifact Upload Check'
                            sh "time dd if=/dev/urandom of=example.txt bs=1M count=100"
                            // archiveArtifacts artifacts: 'example.txt'
                            stash name: "files", includes: "example.txt"
                            unstash name: "files"
                        }
                    }
                }
            }
            }

  description: ''
  disabled: false
  displayName: ''
  resumeBlocked: false
